name: SGSI_Build

on:
  workflow_dispatch:
    inputs:
      rom_url_1:
        description: 'First firmware URL'
        required: true
        type: string
      rom_url_2:
        description: 'Second firmware URL'
        required: true
        type: string
      build_type:
        description: 'Build type'
        required: true
        type: string
      os_type:
        description: 'OS type'
        required: true
        type: string
      zip_name:
        description: 'Zip name'
        required: true
        type: string
      version:
        description: 'Version'
        required: true
        type: string
      repack_name:
        description: 'Repack name'
        required: true
        type: string

jobs:
  build:
    runs-on: ubuntu-20.04

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Check Configuration
        run: |
          function required () { if ! [[ "$1" ]]; then echo "$2 variable can't be null." && exit 1; fi }
          required "${{ github.event.inputs.rom_url_1 }}" "ROM_URL_1 config"
          required "${{ github.event.inputs.rom_url_2 }}" "ROM_URL_2 config"
          required "${{ github.event.inputs.build_type }}" "BUILD_TYPE config"
          required "${{ github.event.inputs.os_type }}" "OS_TYPE config"
          required "${{ github.event.inputs.zip_name }}" "ZIP_NAME config"
          required "${{ github.event.inputs.version }}" "VERSION config"
          required "${{ github.event.inputs.repack_name }}" "REPACK_NAME config"

      - name: Cleanup workspace
        run: |
          docker rmi `docker images -q`
          sudo rm -rf /usr/share/dotnet /etc/mysql /etc/php /etc/apt/sources.list.d
          sudo -E apt-get -y purge azure-cli ghc* zulu* hhvm llvm* firefox* google* dotnet* powershell openjdk* php*
          sudo -E apt-get update
          sudo -E apt-get -y autoremove --purge
          sudo -E apt-get clean
          df -h

      - name: Initializing Environment
        run: |
          sudo apt-get install -y git wget git zip unzip curl axel

      - name: Cloning SGSI source code
        run: |
          git clone --recurse-submodules https://github.com/xiaoxindada/SGSI-build-tool.git -b 12 $GITHUB_WORKSPACE/SGSI-build-tool

      - name: Setup sGSI tools requirements
        run: |
          sudo sed -i 's/USE_MIRROR_FOR_PIP\=true/USE_MIRROR_FOR_PIP\=false/' $GITHUB_WORKSPACE/SGSI-build-tool/setup.sh
          sudo bash $GITHUB_WORKSPACE/SGSI-build-tool/setup.sh

      - name: Build SGSI from URL 1
        run: |
          sudo bash $GITHUB_WORKSPACE/SGSI-build-tool/url2SGSI.sh "${{ github.event.inputs.rom_url_1 }}" "${{ github.event.inputs.os_type }}" "${{ github.event.inputs.build_type }}"

      - name: Build SGSI from URL 2
        run: |
          sudo bash $GITHUB_WORKSPACE/SGSI-build-tool/url2SGSI.sh "${{ github.event.inputs.rom_url_2 }}" "${{ github.event.inputs.os_type }}" "${{ github.event.inputs.build_type }}"

      - name: Repack Output File
        run: |
          cd $GITHUB_WORKSPACE/SGSI-build-tool
          mkdir -p upload
          zip -r "${{ github.event.inputs.repack_name }}" ./SGSI/*
          if [[ $(du -sb "${{ github.event.inputs.repack_name }}" | awk '{print $1}') -gt 2097152000 ]]; then
            echo -e "split packaging..."
            tar -cpzf - "${{ github.event.inputs.repack_name }}" | split -d -b 1024m - "upload/${{ github.event.inputs.repack_name }}"
          else
            mv "${{ github.event.inputs.repack_name }}" "upload/${{ github.event.inputs.repack_name }}"
          fi
          ls "upload"

      - name: Upload SGSI to GH-Release
        uses: ncipollo/release-action@v1.8.6
        with:
          artifacts: ${{ github.workspace }}/SGSI-build-tool/upload/*
          name: "${{ github.event.inputs.os_type }}${{ github.event.inputs.build_type }}-Android${{ github.event.inputs.version }}-unpack"
          tag: "${{ github.event.inputs.os_type }}${{ github.event.inputs.build_type }}-${{ github.event.inputs.version }}-${{ github.run_number }}"
          bodyFile: "${{ github.workspace }}/SGSI-build-tool/SGSI/build_info.txt"
          token: ${{ secrets.GITHUB_TOKEN }}
